//
//  WeatherUpKit.swift
//  WeatherUp
//
//  Created by charmaex on 08.10.16.
//  Copyright (c) 2016 charmaex. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

import UIKit

open class WeatherUpKit: NSObject {

	/// / Cache

	fileprivate struct Cache {
		static let blue: UIColor = UIColor(red: 0.255, green: 0.808, blue: 1.000, alpha: 1.000)
	}

	/// / Colors

	open class var blue: UIColor { return Cache.blue }

	/// / Drawing Methods

	open class func drawArrow(frame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), arrowColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), arrowValue: CGFloat = 0) {
		/// / General Declarations
		let context = UIGraphicsGetCurrentContext()

		/// / Variable Declarations
		let arrowCalc: CGFloat = arrowValue * 90
		let upper: CGFloat = arrowCalc + 45
		let lower: CGFloat = -arrowCalc - 45

		/// / Subframes
		let group: CGRect = CGRect(x: frame.minX + 5, y: frame.minY + 5, width: frame.width - 10, height: frame.height - 10)

		/// / Group
		context?.saveGState()
		context?.beginTransparencyLayer(auxiliaryInfo: nil)

		/// / Clip Mask
		let maskPath = UIBezierPath(ovalIn: CGRect(x: group.minX + floor(group.width * 0.00000 + 0.5), y: group.minY + floor(group.height * 0.00000 + 0.5), width: floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), height: floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5)))
		maskPath.addClip()

		/// / Circle Drawing
		let circleRect = CGRect(x: group.minX + floor(group.width * -0.03333 + 0.5), y: group.minY + floor(group.height * -0.03333 + 0.5), width: floor(group.width * 1.03333 + 0.5) - floor(group.width * -0.03333 + 0.5), height: floor(group.height * 1.03333 + 0.5) - floor(group.height * -0.03333 + 0.5))
		let circlePath = UIBezierPath()
		circlePath.addArc(withCenter: CGPoint(x: circleRect.midX, y: circleRect.midY), radius: circleRect.width / 2, startAngle: -lower * CGFloat(M_PI) / 180, endAngle: -upper * CGFloat(M_PI) / 180, clockwise: true)
		circlePath.addLine(to: CGPoint(x: circleRect.midX, y: circleRect.midY))
		circlePath.close()

		arrowColor.setStroke()
		circlePath.lineWidth = 2
		circlePath.stroke()

		context?.endTransparencyLayer()
		context?.restoreGState()
	}

	open class func drawSun() {
		/// / Color Declarations
		let yellow = UIColor(red: 1.000, green: 0.847, blue: 0.310, alpha: 1.000)

		/// / Bezier Drawing
		let bezierPath = UIBezierPath()
		bezierPath.move(to: CGPoint(x: 85.16, y: 0.17))
		bezierPath.addCurve(to: CGPoint(x: 80, y: 23.48), controlPoint1: CGPoint(x: 82.61, y: 7.75), controlPoint2: CGPoint(x: 80.89, y: 15.52))
		bezierPath.addCurve(to: CGPoint(x: 74.84, y: 0.17), controlPoint1: CGPoint(x: 79.11, y: 15.52), controlPoint2: CGPoint(x: 77.39, y: 7.75))
		bezierPath.addLine(to: CGPoint(x: 85.16, y: 0.17))
		bezierPath.close()
		bezierPath.move(to: CGPoint(x: 124.38, y: 13.44))
		bezierPath.addCurve(to: CGPoint(x: 108.26, y: 31.05), controlPoint1: CGPoint(x: 118.39, y: 18.74), controlPoint2: CGPoint(x: 113.01, y: 24.61))
		bezierPath.addCurve(to: CGPoint(x: 115.45, y: 8.28), controlPoint1: CGPoint(x: 111.47, y: 23.72), controlPoint2: CGPoint(x: 113.86, y: 16.13))
		bezierPath.addCurve(to: CGPoint(x: 124.38, y: 13.44), controlPoint1: CGPoint(x: 118.53, y: 9.81), controlPoint2: CGPoint(x: 121.52, y: 11.53))
		bezierPath.close()
		bezierPath.move(to: CGPoint(x: 51.74, y: 31.05))
		bezierPath.addCurve(to: CGPoint(x: 35.62, y: 13.44), controlPoint1: CGPoint(x: 46.99, y: 24.61), controlPoint2: CGPoint(x: 41.62, y: 18.74))
		bezierPath.addCurve(to: CGPoint(x: 44.55, y: 8.28), controlPoint1: CGPoint(x: 38.48, y: 11.53), controlPoint2: CGPoint(x: 41.46, y: 9.81))
		bezierPath.addCurve(to: CGPoint(x: 51.74, y: 31.05), controlPoint1: CGPoint(x: 46.14, y: 16.13), controlPoint2: CGPoint(x: 48.53, y: 23.72))
		bezierPath.close()
		bezierPath.move(to: CGPoint(x: 151.72, y: 44.55))
		bezierPath.addCurve(to: CGPoint(x: 128.95, y: 51.74), controlPoint1: CGPoint(x: 143.87, y: 46.14), controlPoint2: CGPoint(x: 136.28, y: 48.53))
		bezierPath.addCurve(to: CGPoint(x: 146.56, y: 35.62), controlPoint1: CGPoint(x: 135.39, y: 46.99), controlPoint2: CGPoint(x: 141.26, y: 41.62))
		bezierPath.addCurve(to: CGPoint(x: 151.72, y: 44.55), controlPoint1: CGPoint(x: 148.47, y: 38.48), controlPoint2: CGPoint(x: 150.19, y: 41.47))
		bezierPath.close()
		bezierPath.move(to: CGPoint(x: 31.05, y: 51.74))
		bezierPath.addCurve(to: CGPoint(x: 8.28, y: 44.55), controlPoint1: CGPoint(x: 23.72, y: 48.53), controlPoint2: CGPoint(x: 16.13, y: 46.14))
		bezierPath.addCurve(to: CGPoint(x: 13.44, y: 35.62), controlPoint1: CGPoint(x: 9.81, y: 41.47), controlPoint2: CGPoint(x: 11.53, y: 38.48))
		bezierPath.addCurve(to: CGPoint(x: 31.05, y: 51.74), controlPoint1: CGPoint(x: 18.74, y: 41.62), controlPoint2: CGPoint(x: 24.61, y: 46.99))
		bezierPath.close()
		bezierPath.move(to: CGPoint(x: 160, y: 79.89))
		bezierPath.addLine(to: CGPoint(x: 160, y: 80.06))
		bezierPath.addCurve(to: CGPoint(x: 159.83, y: 85.16), controlPoint1: CGPoint(x: 160, y: 81.76), controlPoint2: CGPoint(x: 159.94, y: 83.46))
		bezierPath.addCurve(to: CGPoint(x: 136.52, y: 80), controlPoint1: CGPoint(x: 152.25, y: 82.61), controlPoint2: CGPoint(x: 144.48, y: 80.89))
		bezierPath.addCurve(to: CGPoint(x: 159.83, y: 74.84), controlPoint1: CGPoint(x: 144.48, y: 79.11), controlPoint2: CGPoint(x: 152.25, y: 77.39))
		bezierPath.addCurve(to: CGPoint(x: 160, y: 79.94), controlPoint1: CGPoint(x: 159.94, y: 76.54), controlPoint2: CGPoint(x: 160, y: 78.24))
		bezierPath.addLine(to: CGPoint(x: 160, y: 79.89))
		bezierPath.close()
		bezierPath.move(to: CGPoint(x: 23.48, y: 80))
		bezierPath.addCurve(to: CGPoint(x: 0.17, y: 85.16), controlPoint1: CGPoint(x: 15.52, y: 80.89), controlPoint2: CGPoint(x: 7.75, y: 82.61))
		bezierPath.addCurve(to: CGPoint(x: -0, y: 80), controlPoint1: CGPoint(x: 0.06, y: 83.44), controlPoint2: CGPoint(x: 0, y: 81.72))
		bezierPath.addCurve(to: CGPoint(x: 0.17, y: 74.84), controlPoint1: CGPoint(x: -0, y: 78.28), controlPoint2: CGPoint(x: 0.06, y: 76.56))
		bezierPath.addCurve(to: CGPoint(x: 23.48, y: 80), controlPoint1: CGPoint(x: 7.75, y: 77.39), controlPoint2: CGPoint(x: 15.52, y: 79.11))
		bezierPath.close()
		bezierPath.move(to: CGPoint(x: 151.72, y: 115.45))
		bezierPath.addCurve(to: CGPoint(x: 146.56, y: 124.38), controlPoint1: CGPoint(x: 150.19, y: 118.54), controlPoint2: CGPoint(x: 148.47, y: 121.52))
		bezierPath.addCurve(to: CGPoint(x: 128.95, y: 108.26), controlPoint1: CGPoint(x: 141.26, y: 118.39), controlPoint2: CGPoint(x: 135.39, y: 113.01))
		bezierPath.addCurve(to: CGPoint(x: 151.72, y: 115.45), controlPoint1: CGPoint(x: 136.28, y: 111.47), controlPoint2: CGPoint(x: 143.87, y: 113.86))
		bezierPath.close()
		bezierPath.move(to: CGPoint(x: 13.44, y: 124.38))
		bezierPath.addCurve(to: CGPoint(x: 8.28, y: 115.45), controlPoint1: CGPoint(x: 11.53, y: 121.52), controlPoint2: CGPoint(x: 9.81, y: 118.54))
		bezierPath.addCurve(to: CGPoint(x: 31.05, y: 108.26), controlPoint1: CGPoint(x: 16.13, y: 113.86), controlPoint2: CGPoint(x: 23.72, y: 111.47))
		bezierPath.addCurve(to: CGPoint(x: 13.44, y: 124.38), controlPoint1: CGPoint(x: 24.61, y: 113.01), controlPoint2: CGPoint(x: 18.74, y: 118.39))
		bezierPath.close()
		bezierPath.move(to: CGPoint(x: 132, y: 80))
		bezierPath.addCurve(to: CGPoint(x: 80, y: 132), controlPoint1: CGPoint(x: 132, y: 108.7), controlPoint2: CGPoint(x: 108.7, y: 132))
		bezierPath.addCurve(to: CGPoint(x: 28, y: 80), controlPoint1: CGPoint(x: 51.3, y: 132), controlPoint2: CGPoint(x: 28, y: 108.7))
		bezierPath.addCurve(to: CGPoint(x: 80, y: 28), controlPoint1: CGPoint(x: 28, y: 51.3), controlPoint2: CGPoint(x: 51.3, y: 28))
		bezierPath.addCurve(to: CGPoint(x: 132, y: 80), controlPoint1: CGPoint(x: 108.7, y: 28), controlPoint2: CGPoint(x: 132, y: 51.3))
		bezierPath.close()
		bezierPath.move(to: CGPoint(x: 124.38, y: 146.56))
		bezierPath.addCurve(to: CGPoint(x: 115.45, y: 151.72), controlPoint1: CGPoint(x: 121.52, y: 148.47), controlPoint2: CGPoint(x: 118.53, y: 150.19))
		bezierPath.addCurve(to: CGPoint(x: 108.26, y: 128.95), controlPoint1: CGPoint(x: 113.86, y: 143.87), controlPoint2: CGPoint(x: 111.47, y: 136.28))
		bezierPath.addCurve(to: CGPoint(x: 124.38, y: 146.56), controlPoint1: CGPoint(x: 113.01, y: 135.39), controlPoint2: CGPoint(x: 118.39, y: 141.26))
		bezierPath.close()
		bezierPath.move(to: CGPoint(x: 45.48, y: 147.53))
		bezierPath.addCurve(to: CGPoint(x: 44.55, y: 151.72), controlPoint1: CGPoint(x: 45.15, y: 148.92), controlPoint2: CGPoint(x: 44.84, y: 150.31))
		bezierPath.addCurve(to: CGPoint(x: 39.71, y: 149.11), controlPoint1: CGPoint(x: 42.91, y: 150.9), controlPoint2: CGPoint(x: 41.29, y: 150.04))
		bezierPath.addCurve(to: CGPoint(x: 35.62, y: 146.56), controlPoint1: CGPoint(x: 38.32, y: 148.3), controlPoint2: CGPoint(x: 36.95, y: 147.45))
		bezierPath.addCurve(to: CGPoint(x: 51.74, y: 128.95), controlPoint1: CGPoint(x: 41.62, y: 141.26), controlPoint2: CGPoint(x: 46.99, y: 135.39))
		bezierPath.addCurve(to: CGPoint(x: 45.48, y: 147.53), controlPoint1: CGPoint(x: 49.11, y: 134.97), controlPoint2: CGPoint(x: 47.02, y: 141.16))
		bezierPath.close()
		bezierPath.move(to: CGPoint(x: 85.16, y: 159.83))
		bezierPath.addCurve(to: CGPoint(x: 80, y: 160), controlPoint1: CGPoint(x: 83.44, y: 159.94), controlPoint2: CGPoint(x: 81.72, y: 160))
		bezierPath.addCurve(to: CGPoint(x: 74.84, y: 159.83), controlPoint1: CGPoint(x: 78.28, y: 160), controlPoint2: CGPoint(x: 76.56, y: 159.94))
		bezierPath.addCurve(to: CGPoint(x: 79.81, y: 138.11), controlPoint1: CGPoint(x: 77.22, y: 152.75), controlPoint2: CGPoint(x: 78.87, y: 145.51))
		bezierPath.addCurve(to: CGPoint(x: 80, y: 136.52), controlPoint1: CGPoint(x: 79.88, y: 137.58), controlPoint2: CGPoint(x: 79.94, y: 137.05))
		bezierPath.addCurve(to: CGPoint(x: 85.16, y: 159.83), controlPoint1: CGPoint(x: 80.89, y: 144.48), controlPoint2: CGPoint(x: 82.61, y: 152.25))
		bezierPath.close()
		yellow.setFill()
		bezierPath.fill()
	}

	open class func drawCloud() {
		/// / Color Declarations
		let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

		/// / Bezier Drawing
		let bezierPath = UIBezierPath()
		bezierPath.move(to: CGPoint(x: 45.51, y: 17.89))
		bezierPath.addCurve(to: CGPoint(x: 73.9, y: 0), controlPoint1: CGPoint(x: 49.92, y: 7.42), controlPoint2: CGPoint(x: 60.97, y: 0))
		bezierPath.addCurve(to: CGPoint(x: 102.29, y: 17.91), controlPoint1: CGPoint(x: 86.84, y: 0), controlPoint2: CGPoint(x: 97.9, y: 7.43))
		bezierPath.addCurve(to: CGPoint(x: 127.38, y: 41.66), controlPoint1: CGPoint(x: 115.55, y: 18.99), controlPoint2: CGPoint(x: 126.14, y: 29.03))
		bezierPath.addCurve(to: CGPoint(x: 142, y: 66.16), controlPoint1: CGPoint(x: 136.09, y: 46.37), controlPoint2: CGPoint(x: 142, y: 55.58))
		bezierPath.addCurve(to: CGPoint(x: 114.16, y: 94), controlPoint1: CGPoint(x: 142, y: 81.52), controlPoint2: CGPoint(x: 129.53, y: 93.99))
		bezierPath.addLine(to: CGPoint(x: 27.84, y: 94))
		bezierPath.addCurve(to: CGPoint(x: 0, y: 66.16), controlPoint1: CGPoint(x: 12.48, y: 94), controlPoint2: CGPoint(x: 0, y: 81.52))
		bezierPath.addCurve(to: CGPoint(x: 14.64, y: 41.65), controlPoint1: CGPoint(x: 0, y: 55.57), controlPoint2: CGPoint(x: 5.92, y: 46.35))
		bezierPath.addCurve(to: CGPoint(x: 45.51, y: 17.89), controlPoint1: CGPoint(x: 16.17, y: 28.86), controlPoint2: CGPoint(x: 29.25, y: 18.74))
		bezierPath.addLine(to: CGPoint(x: 45.51, y: 17.89))
		bezierPath.close()
		bezierPath.usesEvenOddFillRule = true

		white.setFill()
		bezierPath.fill()
	}

	open class func drawSmallCloud() {
		/// / Color Declarations
		let lightGray = UIColor(red: 0.894, green: 0.894, blue: 0.894, alpha: 1.000)

		/// / Bezier Drawing
		let bezierPath = UIBezierPath()
		bezierPath.move(to: CGPoint(x: 35.63, y: 17.72))
		bezierPath.addCurve(to: CGPoint(x: 60.93, y: 0), controlPoint1: CGPoint(x: 38.46, y: 7.54), controlPoint2: CGPoint(x: 48.72, y: 0))
		bezierPath.addCurve(to: CGPoint(x: 85.43, y: 15.39), controlPoint1: CGPoint(x: 72.19, y: 0), controlPoint2: CGPoint(x: 81.79, y: 6.42))
		bezierPath.addCurve(to: CGPoint(x: 101.29, y: 33.4), controlPoint1: CGPoint(x: 93.75, y: 17.62), controlPoint2: CGPoint(x: 100.1, y: 24.68))
		bezierPath.addCurve(to: CGPoint(x: 116, y: 54.08), controlPoint1: CGPoint(x: 109.85, y: 36.36), controlPoint2: CGPoint(x: 116, y: 44.51))
		bezierPath.addCurve(to: CGPoint(x: 94.08, y: 76), controlPoint1: CGPoint(x: 116, y: 66.17), controlPoint2: CGPoint(x: 106.18, y: 76))
		bezierPath.addLine(to: CGPoint(x: 21.92, y: 76))
		bezierPath.addCurve(to: CGPoint(x: 0, y: 54.08), controlPoint1: CGPoint(x: 9.82, y: 76), controlPoint2: CGPoint(x: 0, y: 66.18))
		bezierPath.addCurve(to: CGPoint(x: 11.69, y: 34.7), controlPoint1: CGPoint(x: 0, y: 45.67), controlPoint2: CGPoint(x: 4.74, y: 38.36))
		bezierPath.addCurve(to: CGPoint(x: 35.63, y: 17.72), controlPoint1: CGPoint(x: 13.59, y: 25.81), controlPoint2: CGPoint(x: 23.37, y: 18.82))
		bezierPath.addLine(to: CGPoint(x: 35.63, y: 17.72))
		bezierPath.close()
		bezierPath.usesEvenOddFillRule = true

		lightGray.setFill()
		bezierPath.fill()
	}

	open class func drawMiniCloud() {
		/// / Color Declarations
		let darkGray = UIColor(red: 0.737, green: 0.737, blue: 0.737, alpha: 1.000)

		/// / Bezier Drawing
		let bezierPath = UIBezierPath()
		bezierPath.move(to: CGPoint(x: 30.63, y: 11.69))
		bezierPath.addCurve(to: CGPoint(x: 49.45, y: 0), controlPoint1: CGPoint(x: 33.69, y: 4.83), controlPoint2: CGPoint(x: 40.97, y: 0))
		bezierPath.addCurve(to: CGPoint(x: 68.35, y: 11.86), controlPoint1: CGPoint(x: 58.01, y: 0), controlPoint2: CGPoint(x: 65.34, y: 4.91))
		bezierPath.addCurve(to: CGPoint(x: 84.28, y: 27.61), controlPoint1: CGPoint(x: 76.89, y: 13.06), controlPoint2: CGPoint(x: 83.55, y: 19.55))
		bezierPath.addCurve(to: CGPoint(x: 96, y: 45.09), controlPoint1: CGPoint(x: 91.16, y: 30.43), controlPoint2: CGPoint(x: 96, y: 37.2))
		bezierPath.addCurve(to: CGPoint(x: 77.09, y: 64), controlPoint1: CGPoint(x: 96, y: 55.52), controlPoint2: CGPoint(x: 87.53, y: 64))
		bezierPath.addLine(to: CGPoint(x: 18.91, y: 64))
		bezierPath.addCurve(to: CGPoint(x: 0, y: 45.09), controlPoint1: CGPoint(x: 8.47, y: 64), controlPoint2: CGPoint(x: 0, y: 55.53))
		bezierPath.addCurve(to: CGPoint(x: 8.74, y: 29.17), controlPoint1: CGPoint(x: 0, y: 38.4), controlPoint2: CGPoint(x: 3.48, y: 32.52))
		bezierPath.addLine(to: CGPoint(x: 8.73, y: 29.09))
		bezierPath.addCurve(to: CGPoint(x: 30.63, y: 11.69), controlPoint1: CGPoint(x: 8.73, y: 19.8), controlPoint2: CGPoint(x: 18.43, y: 12.2))
		bezierPath.addLine(to: CGPoint(x: 30.63, y: 11.69))
		bezierPath.close()
		bezierPath.usesEvenOddFillRule = true

		darkGray.setFill()
		bezierPath.fill()
	}

	open class func drawMoon() {
		/// / Color Declarations
		let lightGray = UIColor(red: 0.894, green: 0.894, blue: 0.894, alpha: 1.000)

		/// / Oval Drawing
		let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 102, height: 102))
		lightGray.setFill()
		ovalPath.fill()
	}

	open class func drawRaindrop() {

		/// / Bezier Drawing
		let bezierPath = UIBezierPath()
		bezierPath.move(to: CGPoint(x: 4.5, y: 0))
		bezierPath.addCurve(to: CGPoint(x: 0, y: 13.5), controlPoint1: CGPoint(x: 4.5, y: 0), controlPoint2: CGPoint(x: 0, y: 9.45))
		bezierPath.addCurve(to: CGPoint(x: 4.5, y: 18), controlPoint1: CGPoint(x: 0, y: 15.98), controlPoint2: CGPoint(x: 2.02, y: 18))
		bezierPath.addCurve(to: CGPoint(x: 9, y: 13.5), controlPoint1: CGPoint(x: 6.98, y: 18), controlPoint2: CGPoint(x: 9, y: 15.98))
		bezierPath.addCurve(to: CGPoint(x: 4.5, y: 0), controlPoint1: CGPoint(x: 9, y: 9.45), controlPoint2: CGPoint(x: 4.5, y: 0))
		bezierPath.addLine(to: CGPoint(x: 4.5, y: 0))
		bezierPath.close()
		bezierPath.usesEvenOddFillRule = true

		WeatherUpKit.blue.setFill()
		bezierPath.fill()
	}

	open class func drawLightning() {
		/// / Color Declarations
		let yellow = UIColor(red: 1.000, green: 0.847, blue: 0.310, alpha: 1.000)

		/// / Bezier Drawing
		let bezierPath = UIBezierPath()
		bezierPath.move(to: CGPoint(x: 22.67, y: 0))
		bezierPath.addLine(to: CGPoint(x: 8.5, y: 0))
		bezierPath.addLine(to: CGPoint(x: 0, y: 31.78))
		bezierPath.addLine(to: CGPoint(x: 17, y: 28.89))
		bezierPath.addLine(to: CGPoint(x: 5.85, y: 52))
		bezierPath.addLine(to: CGPoint(x: 34, y: 17.33))
		bezierPath.addLine(to: CGPoint(x: 14.17, y: 20.22))
		bezierPath.addLine(to: CGPoint(x: 22.67, y: 0))
		bezierPath.close()
		bezierPath.usesEvenOddFillRule = true

		yellow.setFill()
		bezierPath.fill()
	}

	open class func drawSnowflake() {
		/// / Color Declarations
		let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

		/// / Bezier Drawing
		let bezierPath = UIBezierPath()
		bezierPath.move(to: CGPoint(x: 15.53, y: 0.87))
		bezierPath.addLine(to: CGPoint(x: 18.14, y: 1.95))
		bezierPath.addLine(to: CGPoint(x: 14.67, y: 10.33))
		bezierPath.addLine(to: CGPoint(x: 23.05, y: 6.86))
		bezierPath.addLine(to: CGPoint(x: 24.13, y: 9.47))
		bezierPath.addLine(to: CGPoint(x: 15.75, y: 12.94))
		bezierPath.addLine(to: CGPoint(x: 24.13, y: 16.41))
		bezierPath.addLine(to: CGPoint(x: 23.05, y: 19.01))
		bezierPath.addLine(to: CGPoint(x: 14.67, y: 15.55))
		bezierPath.addLine(to: CGPoint(x: 18.14, y: 23.92))
		bezierPath.addLine(to: CGPoint(x: 15.53, y: 25))
		bezierPath.addLine(to: CGPoint(x: 12.06, y: 16.63))
		bezierPath.addLine(to: CGPoint(x: 8.59, y: 25))
		bezierPath.addLine(to: CGPoint(x: 5.99, y: 23.92))
		bezierPath.addLine(to: CGPoint(x: 9.45, y: 15.55))
		bezierPath.addLine(to: CGPoint(x: 1.08, y: 19.01))
		bezierPath.addLine(to: CGPoint(x: 0, y: 16.41))
		bezierPath.addLine(to: CGPoint(x: 8.37, y: 12.94))
		bezierPath.addLine(to: CGPoint(x: 0, y: 9.47))
		bezierPath.addLine(to: CGPoint(x: 1.08, y: 6.86))
		bezierPath.addLine(to: CGPoint(x: 9.45, y: 10.33))
		bezierPath.addLine(to: CGPoint(x: 5.99, y: 1.95))
		bezierPath.addLine(to: CGPoint(x: 8.59, y: 0.87))
		bezierPath.addLine(to: CGPoint(x: 12.06, y: 9.25))
		bezierPath.addLine(to: CGPoint(x: 15.53, y: 0.87))
		bezierPath.close()
		bezierPath.usesEvenOddFillRule = true

		white.setFill()
		bezierPath.fill()
	}

	open class func drawFog() {
		/// / Color Declarations
		let lightGray = UIColor(red: 0.894, green: 0.894, blue: 0.894, alpha: 1.000)

		/// / Rectangle Drawing
		let rectanglePath = UIBezierPath(rect: CGRect(x: -5, y: -5, width: 138, height: 13))
		lightGray.setFill()
		rectanglePath.fill()
	}

	open class func drawHill() {
		/// / General Declarations
		let context = UIGraphicsGetCurrentContext()

		/// / Color Declarations
		let greenOne = UIColor(red: 0.000, green: 0.553, blue: 0.051, alpha: 1.000)
		let greenTwo = UIColor(red: 0.000, green: 0.643, blue: 0.043, alpha: 1.000)
		let greenStroke = UIColor(red: 0.000, green: 0.392, blue: 0.027, alpha: 1.000)

		/// / Group
		context?.saveGState()
		context?.beginTransparencyLayer(auxiliaryInfo: nil)

		/// / Clip Clip
		let clipPath = UIBezierPath(ovalIn: CGRect(x: -281.25, y: 0.45, width: 900, height: 458.6))
		clipPath.addClip()

		/// / Rectangle Drawing
		let rectanglePath = UIBezierPath(rect: CGRect(x: -286.25, y: -4.57, width: 910, height: 468.65))
		greenOne.setFill()
		rectanglePath.fill()

		/// / Bezier Drawing
		let bezierPath = UIBezierPath()
		bezierPath.move(to: CGPoint(x: 375, y: 3.38))
		bezierPath.addLine(to: CGPoint(x: 225, y: 2.44))
		bezierPath.addCurve(to: CGPoint(x: 248.44, y: 26.03), controlPoint1: CGPoint(x: 225, y: 2.44), controlPoint2: CGPoint(x: 248.11, y: 26.28))
		bezierPath.addCurve(to: CGPoint(x: 212.81, y: 54.33), controlPoint1: CGPoint(x: 248.77, y: 25.77), controlPoint2: CGPoint(x: 212.81, y: 54.33))
		bezierPath.addLine(to: CGPoint(x: 168.75, y: 59.05))
		bezierPath.addLine(to: CGPoint(x: 150, y: 85.47))
		bezierPath.addLine(to: CGPoint(x: 168.75, y: 115.66))
		bezierPath.addLine(to: CGPoint(x: 197.81, y: 129.81))
		bezierPath.addLine(to: CGPoint(x: 220.31, y: 167.55))
		bezierPath.addLine(to: CGPoint(x: 206.25, y: 186.42))
		bezierPath.addLine(to: CGPoint(x: 175.31, y: 197.74))
		bezierPath.addLine(to: CGPoint(x: 387.19, y: 213.78))
		bezierPath.addLine(to: CGPoint(x: 393.75, y: 3.38))
		bezierPath.addLine(to: CGPoint(x: 375, y: 3.38))
		bezierPath.addLine(to: CGPoint(x: 375, y: 3.38))
		bezierPath.close()
		bezierPath.usesEvenOddFillRule = true

		greenTwo.setFill()
		bezierPath.fill()

		/// / Oval Drawing
		let ovalPath = UIBezierPath(ovalIn: CGRect(x: -281.25, y: 0.45, width: 900, height: 458.6))
		greenStroke.setStroke()
		ovalPath.lineWidth = 2.5
		ovalPath.stroke()

		context?.endTransparencyLayer()
		context?.restoreGState()
	}
}
